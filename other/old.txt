// func sendOffer(packet_slice []byte, config c.Configurations) {
// 	dhcp_packet := gopacket.NewPacket(packet_slice, layers.LayerTypeEthernet, gopacket.Default)
//     ethLayer := dhcp_packet.Layer(layers.LayerTypeEthernet)
// 	ethernetPacket, _ := ethLayer.(*layers.Ethernet)

// 	broadcastIP := net.IPv4(255, 255, 255, 255)
// 	offeredIP := generateAddr()
// 	ipLayer := &layers.IPv4{
// 		SrcIP: net.ParseIP(config.Server.ServerAddr),
// 		// Set the destination as broadcast
// 		DstIP: broadcastIP,
// 	}

// 	srcMac, err := net.ParseMAC(config.Metal.HardwareAddr)
// 	if err != nil {
// 		log.Fatalf("Error occured while parsing server Hardware addr")
// 	}

// 	ethernetLayer := &layers.Ethernet{
//         SrcMAC: srcMac,
// 		DstMAC: ethernetPacket.SrcMAC,
// 		EthernetType: layers.EthernetTypeIPv4,
//     }
// 	udpLayer := &layers.UDP{
//         SrcPort: layers.UDPPort(67),
//         DstPort: layers.UDPPort(68),
//     }

// 	udpLayer.SetNetworkLayerForChecksum(ipLayer)

// 	msgTypeOption := layers.NewDHCPOption(layers.DHCPOptMessageType, []byte{byte(layers.DHCPMsgTypeOffer)})

//     // Collect them into a DHCPOptions slice
//     dhcpOptions := layers.DHCPOptions{
//         msgTypeOption,
//     }
// 	dhcpLayer, _ := constructOfferLayer(packet_slice, offeredIP, dhcpOptions, config) // Returns pointer to what was affected

// 	// Set the UDP layer len
// 	udpLength := uint16(8 + len(dhcpLayer.Contents))
// 	udpLayer.Length = udpLength

// 	options := gopacket.SerializeOptions{}
// 	buffer := gopacket.NewSerializeBuffer()
// 	serialErr := gopacket.SerializeLayers(buffer, options, 
// 		ethernetLayer,
// 		ipLayer,
// 		udpLayer,
// 		dhcpLayer,
// 	)
// 	if serialErr != nil {
// 		log.Fatalf("Error occured while serializing layers: %v", serialErr)
// 	}

// 	outgoingPacket := buffer.Bytes()

// 	conn, err := net.ListenPacket("ip4:udp", "0.0.0.0")
// 	if err != nil {
// 		log.Printf("Error creating raw socket for sending offer: %v", err)
// 		return
// 	}
// 	defer conn.Close()

// 	addr := &net.IPAddr{IP: broadcastIP}
// 	_, err = conn.WriteTo(outgoingPacket, addr)
// 	if err != nil {
// 		log.Printf("Error sending packet: %v", err)
// 		return
// 	}

// 	log.Printf("DHCP Offer packet sent to %v", broadcastIP.String())
// 	// addr := fmt.Sprintf("%v:68", offeredIP)
// 	// clientAddr, err := net.ResolveUDPAddr("udp", addr)
// 	// if err != nil {
// 	// 	log.Fatal(err)
// 	// }

// 	// conn, err := net.DialUDP("udp", nil, clientAddr)
// 	// if err != nil {
// 	// 	log.Fatal(err)
// 	// }
// 	// defer conn.Close()

// 	// _, err = conn.Write(outgoingPacket)
// 	// if err != nil {
// 	// 	log.Fatal(err)
// 	// }

// 	// Just for windows debugging, get all devices and use the first one
// 	// devices, _ := pcap.FindAllDevs()
// 	// for _, device := range devices {
// 	// 	fmt.Println(device.Name)
// 	// 	fmt.Println(device.Description)
// 	// }

// 	// Windows interface \\Device\\NPF_{3C62326A-1389-4DB7-BCF8-55747D0B8757}
// 	// Linux interface enp0s31f6

// 	// handle, err := pcap.OpenLive("enp6s18", 67, true, pcap.BlockForever)

// 	// if err != nil {
// 	// 	log.Fatal(err)
// 	// }
// 	// defer handle.Close()

// 	// err = handle.WritePacketData(outgoingPacket)
//     // if err != nil {
//     //     log.Fatal(err)
//     // }
// }

// MAIN
// config, err := readConfig(); if err != nil {
// 	log.Fatalf("Error parsing config file: %v", err)
// }

// fmt.Printf(config.Server.DNS)

// var ip net.IP
// interfaceName := config.Metal.Interface
// hardwareAddr, err := net.ParseMAC(config.Metal.HardwareAddr)
// fmt.Printf(config.Metal.HardwareAddr)

// if interfaceName == "any" {
// 	ip = net.IPv4zero
// } else if interfaceName != "any" {
// 	addr, err := getInterfaceIP(interfaceName); if err != nil {
// 		log.Fatalf("Error occured when getting the IP for interface")
// 	}
// 	ip = addr
// }

// // ha, err := getInterfaceHA(interfaceName)
// fmt.Printf(hardwareAddr.String())

// // Listen for incoming UDP packets on port 67 on this addr
// addr := net.UDPAddr{
//     Port: config.Server.Port,
//     IP:   ip,
// }

// conn, err := net.ListenUDP("udp", &addr)
// if err != nil {
//     log.Fatalf("Error listening on UDP port %d: %v", DHCPServerPort, err)
// }

// // Close the connection upon exit even though its an endless loop
// defer conn.Close()

// // Start main loop to receive packets
// for {
//     // Buffer to hold incoming packet
//     buffer := make([]byte, BufferSize)
    
//     // Receive the UDP packet
//     n, clientAddr, err := conn.ReadFromUDP(buffer)
//     if err != nil {
//         log.Printf("Error receiving packet: %v", err)
//         continue
//     }
    
//     // Start goroutine to handle the packet
//     go handleDHCPPacket(buffer[:n], clientAddr, config)
// }

// Bootp operation, above DHCP Options
// switch dhcp.Operation {
// case layers.DHCPOpRequest:
// 	log.Printf("Bootp packet is Request")
// case layers.DHCPOpReply:
// 	log.Printf("Bootp packet is Reply")
// default:
// 	log.Printf("Error, no Operation specified, I should be confused")
// }

// message, found := getDHCPOption(dhcp.Options, layers.DHCPOptMessageType)










package test

// import (
// 	"log"
//     "fmt"
//     "encoding/json"

//     // "github.com/spf13/viper"
// )

// // func loadConfig(filename string) (map[string]interface{}, error) {
// //     viper.SetConfigFile(filename)
// //     err := viper.ReadInConfig()
// //     if err != nil {
// //         return nil, err
// //     }

// //     return viper.AllSettings(), nil
// // }

// // func main() {
// // 	x, _ := loadConfig("./config.yml")
// // 	fmt.Println(x["metal"]["port"])
// // }

// type Server struct {
//     Port 			int `json:"port"`
//     ListenInterface	string `json:"listen_interface"`
//     NumWorkers		int	`json:"num_workers"`
// }

// type DHCP struct {
//     SubnetMask		string `json:"subnet_mask"`
//     Router			[]string `json:"router"`
// }

// type Config struct {
//     Server Server `json:"server"`
//     DHCP   DHCP `json:"dhcp"`
// }

// func main() {
// 	// viper.SetConfigName("config") // Name of the file without extension
//     // viper.SetConfigType("json")   // File format (json, yaml, etc.)
//     // viper.AddConfigPath(".")      // Path to look for the file

//     // // Read the config file
//     // if err := viper.ReadInConfig(); err != nil {
//     //     log.Fatalf("Error reading config file, %s", err)
//     // }

//     // // Create a config struct
//     // var config Config

//     // // Unmarshal the JSON data into the struct
//     // err := viper.Unmarshal(&config)
//     // if err != nil {
//     //     log.Fatalf("Unable to unmarshal config, %v", err)
//     // }

//     config := Config{
//         Server: Server{
//             Port: 100,
//             ListenInterface: "any",
//             NumWorkers: 100,
//         },
//         DHCP: DHCP {
//             SubnetMask: "255.255.255.0",
//             Router: []string{"192.168.1.1"},
//         },
//     }


//     jsonData, err := json.MarshalIndent(config, "", "    ")
//     if err != nil {
//         log.Fatalf("Error marshaling to JSON, %v", err)
//     }

//     // Output the JSON string
//     fmt.Println(string(jsonData))
//     // Marshal 

//     // Output the config struct values
//     // fmt.Printf("Server: %s\n", config.Server)
//     // fmt.Printf("Port: %d\n", config.Port)
//     // fmt.Printf("Database User: %s\n", config.Database.User)
//     // fmt.Printf("Database Password: %s\n", config.Database.Password)
//     // fmt.Printf("Database Name: %s\n", config.Database.DBName)
// }

// type OptionHandler func(dhcpRequest *layers.DHCPv4, config c.Config) []byte

// func handleBroadcastAddr(dhcpRequest *layers.DHCPv4, config c.Config) []byte {
// 	return net.ParseIP(config.DHCP.BroadcastAddr).To4()
// }

// func readConfig() (c.Configur, error) {
	// 	viper.SetConfigName("config")
	// 	viper.AddConfigPath(".")
	// 	viper.SetConfigType("yml")
	// 	var config c.Configurations
	
	// 	if err := viper.ReadInConfig(); err != nil {
	// 		return config, fmt.Errorf("Error reading config file, %s", err)
	// 	}
	
	// 	err := viper.Unmarshal(&config)
	// 	if err != nil {
	// 		return config, fmt.Errorf("Error decoding from struct, %s", err)
	// 	}
	
	// 	return config, nil
	// }

	// Converts const to byte, then wraps byte in byte slice cause NewDHCPOption takes a byte slice
	// msgTypeOption := layers.NewDHCPOption(layers.DHCPOptMessageType, []byte{byte(layers.DHCPMsgTypeOffer)})
	// // subnetMaskOption := layers.NewDHCPOption(layers.DHCPOptSubnetMask, subnet)
	// gatewayOption := layers.NewDHCPOption(layers.DHCPOptRouter, s.optionsMap[layers.DHCPOptRouter].ToBytes())
	// // dnsOption := layers.NewDHCPOption(layers.DHCPOptDNS, []byte(net.ParseIP(config.DHCP.DNSServer).To4()))
	// leaseLenOption := layers.NewDHCPOption(layers.DHCPOptLeaseTime, s.optionsMap[layers.DHCPOptLeaseTime].ToBytes())

    // Collect them into a DHCPOptions slice

	// dhcpOptions := options.ReadRequestList(dhcpLayer)

    // dhcpOptions := layers.DHCPOptions{
    //     msgTypeOption,
	// 	// subnetMaskOption,
	// 	gatewayOption,
	// 	// dnsOption,
	// 	leaseLenOption,
    // }

    // func (s *Server) ReadRequestListOffer(layer *layers.DHCPv4) (*layers.DHCPOptions, bool) {
// 	// Get RequestParams Option from layer.Options
// 	requestList, ok := dhcpUtils.GetDHCPOption(layer.Options, layers.DHCPOptParamsRequest)
// 	if !ok {
// 		return nil, false
// 	}

// 	dhcpOptions := layers.DHCPOptions{}
// 	// Iterate over Request List, get option requested 
// 	for _, req := range requestList.Data {
// 		if s.optionsMap[layers.DHCPOpt(req)] == nil {
// 			continue
// 		}
// 		r := s.optionsMap[layers.DHCPOpt(req)].ToBytes()
// 		if r == nil {
// 			continue
// 		}

// 		op := layers.NewDHCPOption(layers.DHCPOpt(req), r) 
// 		dhcpOptions = append(dhcpOptions, op)
// 	}

// 	msgTypeOption := layers.NewDHCPOption(layers.DHCPOptMessageType, []byte{byte(layers.DHCPMsgTypeAck)})
// 	dhcpServerIP := layers.NewDHCPOption(layers.DHCPOptServerID, s.serverIP.To4())
// 	endOptions := layers.NewDHCPOption(layers.DHCPOptEnd, []byte{})

// 	dhcpOptions = append(dhcpOptions, msgTypeOption)
// 	dhcpOptions = append(dhcpOptions, dhcpServerIP)
// 	dhcpOptions = append(dhcpOptions, endOptions)

// 	// We return a pointer so we can append other things later, such as opt 255
// 	return &dhcpOptions, true
// }

// func (s *Server) ConstructAckLayer(packet_slice []byte, offeredIP net.IP) (*layers.DHCPv4, error) {
// 	DHCPPacket := gopacket.NewPacket(packet_slice, layers.LayerTypeDHCPv4, gopacket.Default)
// 	discDhcpLayer := DHCPPacket.Layer(layers.LayerTypeDHCPv4)

// 	lowPacket, ok := discDhcpLayer.(*layers.DHCPv4)
// 	if !ok {
// 		log.Fatalf("Error while parsing DHCPv4 layer in packet")
// 	} 

// 	dhcpOptions, ok := s.ReadRequestList(lowPacket)
// 	if !ok {
// 		log.Println("Request list does not exist in Discover")
// 	}

// 	var hardwareLen uint8 = 6 // MAC is commonly 6
// 	var hardwareOpts uint8 = 0 // None I guess, maybe specify unicast or something
// 	xid := lowPacket.Xid // Carry over XID, "We are in the same conversation"
// 	secs := lowPacket.Secs // All secs were 1 in notes

// 	dhcpLayer := &layers.DHCPv4{
// 		Operation:    layers.DHCPOpReply, // Type of Bootp reply, always reply when coming from server
// 		HardwareType: layers.LinkTypeEthernet,
// 		HardwareLen:  hardwareLen,
// 		HardwareOpts: hardwareOpts, 
// 		Xid:          xid, // Need this from discover
// 		Secs:         secs, // Make this up for now
// 		YourClientIP: offeredIP, // Your IP is what is offered, what is 'yours'
// 		// ClientHWAddr: ethernetPacket.SrcMAC,
// 		ClientHWAddr: lowPacket.ClientHWAddr,
// 		Options:     *dhcpOptions,
// 	}

// 	return dhcpLayer, nil
// }

// func (s *Server) createAck(packet_slice []byte, config c.Config) {
// 	dhcp_packet := gopacket.NewPacket(packet_slice, layers.LayerTypeEthernet, gopacket.Default)
//     ethLayer := dhcp_packet.Layer(layers.LayerTypeEthernet)

// 	// dhcpL, _ := dhcp_packet.Layer(layers.LayerTypeDHCPv4).(*layers.DHCPv4)
// 	ethernetPacket, _ := ethLayer.(*layers.Ethernet)

// 	srcMAC := ethernetPacket.SrcMAC
// 	log.Println(srcMAC.String())

// 	buf := gopacket.NewSerializeBuffer()
// 	var layersToSerialize []gopacket.SerializableLayer

// 	ethernetLayer := &layers.Ethernet{
// 		SrcMAC: s.serverMAC,
// 		DstMAC: srcMAC,
// 		//DstMAC:  net.HardwareAddr{0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
// 		EthernetType: layers.EthernetTypeIPv4,
// 	}
// 	layersToSerialize = append(layersToSerialize, ethernetLayer)

// 	broadcastAddr := net.IP{255, 255, 255, 255}
// 	offeredIP := generateAddr()

// 	ipLayer := &layers.IPv4{
// 		Version: 4,
// 		TTL: 64,
// 		SrcIP: s.serverIP, // We always respond on the DHCP ip
// 		DstIP: broadcastAddr, // We set the Dest to that of the offered IP
// 		Protocol: layers.IPProtocolUDP,
// 	}
// 	layersToSerialize = append(layersToSerialize, ipLayer)

// 	udpLayer := &layers.UDP{
// 		SrcPort: layers.UDPPort(67),
// 		DstPort: layers.UDPPort(68),
// 	}
// 	udpLayer.SetNetworkLayerForChecksum(ipLayer) // Important for checksum calculation
// 	layersToSerialize = append(layersToSerialize, udpLayer)

// 	dhcpLayer, _ := s.ConstructAckLayer(packet_slice, offeredIP) // Returns pointer to what was affected
// 	layersToSerialize = append(layersToSerialize, dhcpLayer)

// 	// Serialize the packet layers into the buffer
// 	if err := gopacket.SerializeLayers(buf, gopacket.SerializeOptions{ComputeChecksums: true, FixLengths: true}, layersToSerialize...); err != nil {
// 		fmt.Printf("error serializing packet: %w", err)
// 		return
// 	}

// 	// Send packet byte slice to sendchannel to be sent 
// 	s.sendch <- buf.Bytes()
// }

	// network := "192.168.1.0/24"
	// nextHop := net.ParseIP("192.168.1.1")

	// routeData, err := createClasslessStaticRoute(network, nextHop)
	// if err != nil {
	// 	fmt.Println("Error:", err)
	// }

	// dhcpCIDRRoute := layers.NewDHCPOption(layers.DHCPOptClasslessStaticRoute, routeData)

	// hostname := []byte("iphone")
	// clientHostName := layers.NewDHCPOption(layers.DHCPOptHostname, hostname)

	// clientID, ok := dhcpUtils.GetDHCPOption(layer.Options, layers.DHCPOptClientID)
	// if ok {
	// 	log.Println("Found client ID")
	// 	dhcpClientIdent := layers.NewDHCPOption(layers.DHCPOptClientID, clientID.Data)
	// 	dhcpOptions = append(dhcpOptions, dhcpClientIdent)
	// }

	// maxSize, mok := dhcpUtils.GetDHCPOption(layer.Options, layers.DHCPOptMaxMessageSize)
	// if mok {
	// 	log.Println("Found maxSize")
	// 	dhcpMaxSize := layers.NewDHCPOption(layers.DHCPOptMaxMessageSize, maxSize.Data)
	// 	dhcpOptions = append(dhcpOptions, dhcpMaxSize)
	// }

// funny logs

// func (s *Server) readRequestListNack(layer *layers.DHCPv4) (*layers.DHCPOptions, bool) {
// 	// Get RequestParams Option from layer.Options
// 	// requestList, ok := dhcpUtils.GetDHCPOption(layer.Options, layers.DHCPOptParamsRequest)
// 	// if !ok {
// 	// 	return nil, false
// 	// }

// 	dhcpOptions := layers.DHCPOptions{}
	
// 	msgTypeOption := layers.NewDHCPOption(layers.DHCPOptMessageType, []byte{byte(layers.DHCPMsgTypeNak)})
// 	dhcpOptions = append(dhcpOptions, msgTypeOption)
// 	// // Iterate over Request List, get option requested 
// 	// for _, req := range requestList.Data {
// 	// 	if s.optionsMap[layers.DHCPOpt(req)] == nil {
// 	// 		continue
// 	// 	}
// 	// 	r := s.optionsMap[layers.DHCPOpt(req)].ToBytes()
// 	// 	if r == nil {
// 	// 		continue
// 	// 	}

// 	// 	op := layers.NewDHCPOption(layers.DHCPOpt(req), r) 
// 	// 	dhcpOptions = append(dhcpOptions, op)
// 	// }

// 	dhcpServerIP := layers.NewDHCPOption(layers.DHCPOptServerID, s.serverIP.To4())
// 	endOptions := layers.NewDHCPOption(layers.DHCPOptEnd, []byte{})

// 	dhcpOptions = append(dhcpOptions, dhcpServerIP)
// 	dhcpOptions = append(dhcpOptions, endOptions)

// 	// We return a pointer so we can append other things later, such as opt 255
// 	return &dhcpOptions, true
// }

// func (s *Server) ConstructNackLayer(packet_slice []byte) (*layers.DHCPv4, error) {
// 	DHCPPacket := gopacket.NewPacket(packet_slice, layers.LayerTypeDHCPv4, gopacket.Default)
// 	discDhcpLayer := DHCPPacket.Layer(layers.LayerTypeDHCPv4)

// 	lowPacket, ok := discDhcpLayer.(*layers.DHCPv4)
// 	if !ok {
// 		log.Fatalf("Error while parsing DHCPv4 layer in packet")
// 	} 

// 	dhcpOptions, ok := s.readRequestListNack(lowPacket)
// 	if !ok {
// 		log.Println("Request list does not exist in Discover")
// 	}

// 	var hardwareLen uint8 = 6 // MAC is commonly 6
// 	var hardwareOpts uint8 = 0 // None I guess, maybe specify unicast or something
// 	xid := lowPacket.Xid // Carry over XID, "We are in the same conversation"
// 	secs := lowPacket.Secs // All secs were 1 in notes

// 	dhcpLayer := &layers.DHCPv4{
// 		Operation:    layers.DHCPOpReply, // Type of Bootp reply, always reply when coming from server
// 		HardwareType: layers.LinkTypeEthernet,
// 		HardwareLen:  hardwareLen,
// 		HardwareOpts: hardwareOpts, 
// 		Xid:          xid, // Need this from discover
// 		Secs:         secs, // Make this up for now
// 		YourClientIP: lowPacket.YourClientIP, // Your IP is what is offered, what is 'yours'
// 		ClientHWAddr: lowPacket.ClientHWAddr,
// 		Options:     *dhcpOptions,
// 	}

// 	return dhcpLayer, nil
// }

    // dhcp_packet := gopacket.NewPacket(packet_slice, layers.LayerTypeDHCPv4, gopacket.Default)
	// discDhcpLayer := dhcp_packet.Layer(layers.LayerTypeDHCPv4)

	// lowPacket, ok := discDhcpLayer.(*layers.DHCPv4)
	// if !ok {
	// 	log.Fatalf("Error while parsing DHCPv4 layer in packet in createack")
	// 	return	
	// }

	// broadcastAddr := net.IP{255, 255, 255, 255}

	// requestedIp, rok := dhcpUtils.GetDHCPOption(lowPacket.Options, layers.DHCPOptRequestIP)
	// if !rok {
	// 	log.Printf("Unable to get Requested IP from reqeuest packet")
	// }

	// log.Println(requestedIp.Data)
	// req := net.IP(requestedIp.Data)

// func (s *Server) createNack(packet_slice []byte, config c.Config) {
// 	dhcp_packet := gopacket.NewPacket(packet_slice, layers.LayerTypeEthernet, gopacket.Default)
// 	ethLayer := dhcp_packet.Layer(layers.LayerTypeEthernet)
// 	ethernetPacket, _ := ethLayer.(*layers.Ethernet)

// 	buf := gopacket.NewSerializeBuffer()
// 	var layersToSerialize []gopacket.SerializableLayer

// 	ethernetLayer := &layers.Ethernet{
// 		SrcMAC: s.serverMAC,
// 		DstMAC: ethernetPacket.SrcMAC,
// 		EthernetType: layers.EthernetTypeIPv4,
// 	}
// 	layersToSerialize = append(layersToSerialize, ethernetLayer)

// 	broadcastAddr := net.IP{255, 255, 255, 255}

// 	ipLayer := &layers.IPv4{
// 		Version: 4,
// 		TTL: 64,
// 		SrcIP: s.serverIP, // We always respond on the DHCP ip
// 		DstIP: broadcastAddr, // We set the Dest to that of the offered IP
// 		Protocol: layers.IPProtocolUDP,
// 	}
// 	layersToSerialize = append(layersToSerialize, ipLayer)

// 	udpLayer := &layers.UDP{
// 		SrcPort: layers.UDPPort(67),
// 		DstPort: layers.UDPPort(68),
// 	}
// 	udpLayer.SetNetworkLayerForChecksum(ipLayer) // Important for checksum calculation
// 	layersToSerialize = append(layersToSerialize, udpLayer)

// 	dhcpLayer, _ := s.ConstructNackLayer(packet_slice) // Returns pointer to what was affected
// 	layersToSerialize = append(layersToSerialize, dhcpLayer)

// 	// Serialize the packet layers into the buffer
// 	if err := gopacket.SerializeLayers(buf, gopacket.SerializeOptions{ComputeChecksums: true, FixLengths: true}, layersToSerialize...); err != nil {
// 		fmt.Printf("error serializing packet: %w", err)
// 		return
// 	}

// 	// Send packet byte slice to sendchannel to be sent 
// 	s.sendch <- buf.Bytes()
// }

// func createClasslessStaticRoute(network string, nextHop net.IP) ([]byte, error) {
// 	_, ipNet, err := net.ParseCIDR(network)
// 	if err != nil {
// 		return nil, fmt.Errorf("invalid network: %v", err)
// 	}

// 	prefixLength, _ := ipNet.Mask.Size()
// 	destinationIP := ipNet.IP.To4()

// 	// Calculate the number of significant octets
// 	significantOctets := (prefixLength + 7) / 8

// 	// Construct the option data
// 	data := make([]byte, 1+significantOctets+4)
// 	data[0] = byte(prefixLength)
// 	copy(data[1:], destinationIP[:significantOctets])
// 	copy(data[1+significantOctets:], nextHop.To4())

// 	return data, nil
// }

// func (s *Server) readRequestListAck(layer *layers.DHCPv4) (*layers.DHCPOptions, bool) {
// 	// Get RequestParams Option from layer.Options
// 	requestList, ok := dhcpUtils.GetDHCPOption(layer.Options, layers.DHCPOptParamsRequest)
// 	if !ok {
// 		return nil, false
// 	}

// 	dhcpOptions := layers.DHCPOptions{}
	
// 	msgTypeOption := layers.NewDHCPOption(layers.DHCPOptMessageType, []byte{byte(layers.DHCPMsgTypeAck)})
// 	dhcpOptions = append(dhcpOptions, msgTypeOption)
// 	// Iterate over Request List, get option requested 
// 	for _, req := range requestList.Data {
// 		if s.optionsMap[layers.DHCPOpt(req)] == nil {
// 			continue
// 		}
// 		r := s.optionsMap[layers.DHCPOpt(req)].ToBytes()
// 		if r == nil {
// 			continue
// 		}

// 		op := layers.NewDHCPOption(layers.DHCPOpt(req), r) 
// 		dhcpOptions = append(dhcpOptions, op)
// 	}

// 	network := "192.168.1.0/24"
// 	nextHop := net.ParseIP("192.168.1.1")

// 	routeData, err := createClasslessStaticRoute(network, nextHop)
// 	if err != nil {
// 		fmt.Println("Error:", err)
// 	}
	
// 	dhcpLeaseTime := layers.NewDHCPOption(layers.DHCPOptLeaseTime, s.optionsMap[layers.DHCPOptLeaseTime].ToBytes())
// 	dhcpCIDRRoute := layers.NewDHCPOption(layers.DHCPOptClasslessStaticRoute, routeData)
// 	dhcpServerIP := layers.NewDHCPOption(layers.DHCPOptServerID, s.serverIP.To4())
// 	endOptions := layers.NewDHCPOption(layers.DHCPOptEnd, []byte{})

// 	dhcpOptions = append(dhcpOptions, dhcpCIDRRoute)
// 	dhcpOptions = append(dhcpOptions, dhcpLeaseTime)
// 	dhcpOptions = append(dhcpOptions, dhcpServerIP)
// 	dhcpOptions = append(dhcpOptions, endOptions)

// 	// We return a pointer so we can append other things later, such as opt 255
// 	return &dhcpOptions, true
// }

	// buf := gopacket.NewSerializeBuffer()
	// var layersToSerialize []gopacket.SerializableLayer

	// ethernetLayer := &layers.Ethernet{
	// 	SrcMAC: s.serverMAC,
	// 	DstMAC: mac, 
	// 	EthernetType: layers.EthernetTypeIPv4,
	// }
	// layersToSerialize = append(layersToSerialize, ethernetLayer)

	// ipLayer := &layers.IPv4{
	// 	Version: 4,
	// 	TTL: 64,
	// 	SrcIP: s.serverIP, // We always respond on the DHCP ip
	// 	DstIP: offeredIP, // We set the Dest to that of the offered IP
	// 	Protocol: layers.IPProtocolUDP,
	// }
	// layersToSerialize = append(layersToSerialize, ipLayer)

	// udpLayer := &layers.UDP{
	// 	SrcPort: layers.UDPPort(67),
	// 	DstPort: layers.UDPPort(68),
	// }
	// udpLayer.SetNetworkLayerForChecksum(ipLayer) // Important for checksum calculation
	// layersToSerialize = append(layersToSerialize, udpLayer)

	// dhcpLayer, _ := s.ConstructOfferLayer(packet_slice, offeredIP) // Returns pointer to what was affected
	// layersToSerialize = append(layersToSerialize, dhcpLayer)

	// // Serialize the packet layers into the buffer
	// if err := gopacket.SerializeLayers(buf, gopacket.SerializeOptions{ComputeChecksums: true, FixLengths: true}, layersToSerialize...); err != nil {
	// 	return fmt.Errorf("error serializing packet: %w", err)
	// }

		// WINDOWS DEV
	// Windows interface: \\Device\\NPF_{3C62326A-1389-4DB7-BCF8-55747D0B8757}
	// handle, err := pcap.OpenLive("\\Device\\NPF_{3C62326A-1389-4DB7-BCF8-55747D0B8757}", 1500, false, pcap.BlockForever)
